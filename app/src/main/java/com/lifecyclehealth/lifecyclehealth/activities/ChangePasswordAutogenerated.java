package com.lifecyclehealth.lifecyclehealth.activities;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.support.design.widget.TextInputLayout;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.TextView;

import com.android.volley.VolleyError;
import com.google.gson.Gson;
import com.lifecyclehealth.lifecyclehealth.R;
import com.lifecyclehealth.lifecyclehealth.application.MyApplication;
import com.lifecyclehealth.lifecyclehealth.callbacks.OnOkClick;
import com.lifecyclehealth.lifecyclehealth.callbacks.VolleyCallback;
import com.lifecyclehealth.lifecyclehealth.db.LifecycleDatabase;
import com.lifecyclehealth.lifecyclehealth.dto.AuthenticateUserDTO;
import com.lifecyclehealth.lifecyclehealth.dto.ChangePasswordAutogeneratedDto;
import com.lifecyclehealth.lifecyclehealth.model.ChangePasswordResponse;
import com.lifecyclehealth.lifecyclehealth.model.User;
import com.lifecyclehealth.lifecyclehealth.services.Time_out_services;
import com.lifecyclehealth.lifecyclehealth.utils.AESHelper;
import com.lifecyclehealth.lifecyclehealth.utils.AppConstants;
import com.lifecyclehealth.lifecyclehealth.utils.NetworkRequestUtil;

import org.json.JSONObject;


import zemin.notification.NotificationDelegater;
import zemin.notification.NotificationLocal;
import zemin.notification.NotificationView;

import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.BASE_URL;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.EXTRA_LOGIN_COUNTRY_CODE;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.EXTRA_LOGIN_MOBILE_NUMBER;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.LOGIN_ID;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.LOGIN_NAME;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.Moxtra_Access_Token;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.Moxtra_ORG_ID;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.Moxtra_uniqueId;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.STATUS_SUCCESS;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.TIME_TO_WAIT;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.TOUCH_TIME;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.URL_CHANGE_PASSWORD_AUTO_GENERATED;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.USER_TOKEN;
import static com.lifecyclehealth.lifecyclehealth.utils.AppConstants.seedValue;

public class ChangePasswordAutogenerated extends BaseActivity {

    private String user, pass;
    private NetworkRequestUtil networkRequestUtil;
    private EditText editTextNewPassword, editConfirmPassword;
    private TextView TextNewPassword, ConfirmPassword;
    private Button changePassword;
    private int password = 0, confirmPasword = 0;
    LifecycleDatabase lifecycleDatabase;
    private NotificationDelegater mDelegater;
    private NotificationLocal mLocal;

    @Override
    String getTag() {
        return "ChangePasswordAutogenerated";
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_change_password_autogenerated);
        networkRequestUtil = new NetworkRequestUtil(this);
        start();
        initView();
    }


    private void initView() {
        lifecycleDatabase = new LifecycleDatabase(getApplicationContext());
        pass = getIntent().getExtras().getString("pass");
        user = getIntent().getExtras().getString("user");

        mDelegater = NotificationDelegater.getInstance();
        mLocal = mDelegater.local();
        mLocal.setView((NotificationView) findViewById(R.id.nv));

        editTextNewPassword = (EditText) findViewById(R.id.editTextNewPassword);
        editConfirmPassword = (EditText) findViewById(R.id.editConfirmPassword);

        TextNewPassword = (TextView) findViewById(R.id.TextNewPassword);
        ConfirmPassword = (TextView) findViewById(R.id.ConfirmPassword);

        TextNewPassword.setVisibility(View.GONE);
        ConfirmPassword.setVisibility(View.GONE);

        editTextNewPassword.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                //printLog("Password:" + validPassword(charSequence.toString() + ""));
                if (validPassword(charSequence.toString())) {
                    password = 1;
                    TextNewPassword.setVisibility(View.GONE);
                } else {
                    password = 0;
                    TextNewPassword.setVisibility(View.VISIBLE);
                }
            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });


        editConfirmPassword.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence charSequence, int i, int i1, int i2) {

            }

            @Override
            public void onTextChanged(CharSequence charSequence, int i, int i1, int i2) {
                printLog(editConfirmPassword.getText().toString() + "||" + charSequence.toString());

                if (editConfirmPassword.getText().toString().equals(charSequence.toString())) {
                    confirmPasword = 1;
                    // confirmPasswordImage.setVisibility(View.VISIBLE);
                    ConfirmPassword.setVisibility(View.GONE);
                } else {
                    confirmPasword = 0;
                    // confirmPasswordImage.setVisibility(View.GONE);
                    ConfirmPassword.setVisibility(View.VISIBLE);
                    ConfirmPassword.setText(getString(R.string.error_in_password_confirm_2));
                }

            }

            @Override
            public void afterTextChanged(Editable editable) {

            }
        });

        changePassword = (Button) findViewById(R.id.changePassword);
        changePassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (editTextNewPassword.getText().toString().trim().equals("")) {
                    TextNewPassword.setVisibility(View.VISIBLE);
                    return;
                } else if (editConfirmPassword.getText().toString().trim().equals("")) {
                    ConfirmPassword.setVisibility(View.VISIBLE);
                    return;
                }
                if (password == 1 && confirmPasword == 1)
                    changePasswordData();
            }
        });


    }

    private void changePasswordData() {
        showProgressDialog(true);
        try {
            if (isConnectedToNetwork(this)) {

                ChangePasswordAutogeneratedDto changePasswordAutogeneratedDto = new ChangePasswordAutogeneratedDto();
                changePasswordAutogeneratedDto.setNewPassword(editTextNewPassword.getText().toString());
                changePasswordAutogeneratedDto.setOldPassword(pass);
                changePasswordAutogeneratedDto.setEmailId(user);

                final JSONObject requestJson = new JSONObject(new Gson().toJson(changePasswordAutogeneratedDto));

                networkRequestUtil.putDataSecure(BASE_URL + URL_CHANGE_PASSWORD_AUTO_GENERATED, requestJson, new VolleyCallback() {
                    @Override
                    public void onSuccess(JSONObject response) {
                        showProgressDialog(false);
                        printLog("ResponseChange password autogenertaed" + response);
                        final AuthenticateUserDTO changePasswordResponse = new Gson().fromJson(response.toString(), AuthenticateUserDTO.class);
                        if (changePasswordResponse != null) {
                            if (changePasswordResponse.getStatus().equalsIgnoreCase(STATUS_SUCCESS)) {
                                // proceedToNextStep(changePasswordResponse);

                                showDialogWithOkButton(changePasswordResponse.getMessage(), new OnOkClick() {
                                    @Override
                                    public void OnOkClicked() {
                                        proceedToNextStep(changePasswordResponse);
                                    }
                                });

                            } else showDialogWithOkButton(changePasswordResponse.getMessage());

                        } else {
                            showDialogWithOkButton(getString(R.string.error_someting_went_wrong));
                        }
                    }

                    @Override
                    public void onError(VolleyError error) {
                        showProgressDialog(false);
                    }
                });
            } else {
                showProgressDialog(false);
                showDialogWithOkButton(getString(R.string.error_no_network));
            }
        } catch (Exception e) {

        }
    }


    private void proceedToNextStep(AuthenticateUserDTO user) {
        try {
            MyApplication.getInstance().updateCurrentUser(user);
            //LoginActivity.loginToken = user.getToken();
            lifecycleDatabase.deleteData();
            Log.e("Token", user.getToken());
            lifecycleDatabase.addData(user.getToken());
            MyApplication.getInstance().addToSharedPreference(USER_TOKEN, user.getToken());
            String LOGIN_ID_ENCRY = AESHelper.encrypt(seedValue, user.getUser().getPatientId());
            String LOGIN_NAME_ENCRY = AESHelper.encrypt(seedValue, user.getUser().getName());

            MyApplication.getInstance().addToSharedPreference(LOGIN_ID, LOGIN_ID_ENCRY);
            MyApplication.getInstance().addToSharedPreference(LOGIN_NAME, LOGIN_NAME_ENCRY);
            MyApplication.getInstance().addToSharedPreference(Moxtra_ORG_ID, user.getUser().getMoxtraOrgid());
            MyApplication.getInstance().addToSharedPreference(Moxtra_uniqueId, user.getUser().getMoxtraUniqueID());
            MyApplication.getInstance().addToSharedPreference(Moxtra_Access_Token, user.getUser().getMoxtraAccessToken());
        } catch (Exception e) {

        }

        User userData = user.getUser();
        printLog("User:" + user);
        /*if (userData.isPasswordAutogenerated()) {

        }else */
        if (userData.isMobilePhoneVerify()) {
            divertToMobileVerification(userData.getCountryCode(), userData.getMobileNo());
        } else {
            boolean isCareGiver = false, isUserPatient = false;
            if (user.getUser().getRole().size() > 0) {
                for (int i = 0; i < user.getUser().getRole().size(); i++) {
                    if (user.getUser().getRole().get(i).equals("Caregiver")) {
                        isCareGiver = true;
                        MyApplication.getInstance().addBooleanToSharedPreference(AppConstants.Is_Care_Giver, true);
                        MyApplication.getInstance().addBooleanToSharedPreference(AppConstants.PREF_IS_PATIENT, false);
                    }
                    if (user.getUser().getRole().get(i).equals("Patient")) {
                        isUserPatient = true;
                        MyApplication.getInstance().addBooleanToSharedPreference(AppConstants.PREF_IS_PATIENT, true);
                        MyApplication.getInstance().addBooleanToSharedPreference(AppConstants.Is_Care_Giver, false);
                    }
                }
            }
            if (isCareGiver) {
                divertToCareGiverScreen();
            } else {
                divertToHomeScreen();
            }
        }

    }

    /* Verify mobile Number*/
    private void divertToMobileVerification(String countyCode, String mobileNumber) {
        startActivity(new Intent(ChangePasswordAutogenerated.this, VerifyMobileNumber.class)
                .putExtra(EXTRA_LOGIN_COUNTRY_CODE, countyCode)
                .putExtra(EXTRA_LOGIN_MOBILE_NUMBER, mobileNumber));
        finish();
    }

    /* For diverting to homeScreen*/
    private void divertToHomeScreen() {
        Intent intent = new Intent(ChangePasswordAutogenerated.this, MainActivity.class);
        intent.putExtra("from_notification", "0");
        startActivity(intent);
        //startActivity(new Intent(LoginActivity.this, MainActivity.class));
        finish();
    }

    private void divertToCareGiverScreen() {
        startActivity(new Intent(ChangePasswordAutogenerated.this, CareGiverActivity.class));
        finish();
    }

    private boolean validPassword(String password) {
        printLog("PasswordToIdentify:" + password);
        boolean upCase = false;
        boolean loCase = false;
        boolean isDigit = false;
        if (password.length() > 6) {
            if (password.matches(".*[A-Z].*")) {
                upCase = true;
            }
            if (password.matches(".*[a-z].*")) {
                loCase = true;
            }
            if (password.matches(".*[1-9].*")) {
                isDigit = true;
            }
        }
        printLog("||Upcase:" + upCase + "||LoCase" + loCase + "||Isdigit" + isDigit);
        return (upCase && loCase && isDigit);
    }


    @Override
    protected void onResume() {
        super.onResume();
        startService(new Intent(this, Time_out_services.class));
    }


    @Override
    public void onBackPressed() {
        super.onBackPressed();
    }


    @Override
    public void onUserInteraction() {
        super.onUserInteraction();
        printLog("touch onUserInteraction");
        TOUCH_TIME = System.currentTimeMillis();
        stop();
        restart();
    }

    @Override
    protected void onStop() {
        super.onStop();
        stop();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        stop();
    }

    Runnable myRunnable = new Runnable() {
        @Override
        public void run() {
            // your code here
            Intent i = new Intent(ChangePasswordAutogenerated.this, LoginActivity.class);
            startActivity(i);
        }
    };

    private Handler myHandler;

    private void start() {
        myHandler = new Handler();
        myHandler.postDelayed(myRunnable, TIME_TO_WAIT);
    }

    private void stop() {
        myHandler.removeCallbacks(myRunnable);
    }

    private void restart() {
        myHandler.removeCallbacks(myRunnable);
        myHandler.postDelayed(myRunnable, TIME_TO_WAIT);
    }


}
